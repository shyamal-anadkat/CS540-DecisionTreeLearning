import java.util.*;
import java.io.*;

////////////////////////////////////////////////////////////////////////////
// Shyamal H Anadkat                                    
// Code for HW1, Problem 2
// Inducing Decision Trees
// CS540 (Shavlik)                                                                   
////////////////////////////////////////////////////////////////////////////

/* BuildAndTestDecisionTree.java 
   To run after compiling, type:
     java BuildAndTestDecisionTree <trainsetFilename> <testsetFilename>*/

public class BuildAndTestDecisionTree
{

	public static void main(String[] args)

	{   
		if (args.length != 2)
		{
			System.err.println("You must call BuildAndTestDecisionTree as " + 
					"follows:\n\njava BuildAndTestDecisionTree " + 
					"<trainsetFilename> <testsetFilename>\n");
			System.exit(1);
		}    

		// Read in the file names.
		String trainset = args[0];
		String testset  = args[1];

		// Read in the examples from the files.
		ListOfExamples trainExamples = new ListOfExamples();
		ListOfExamples testExamples  = new ListOfExamples();
		if (!trainExamples.ReadInExamplesFromFile(trainset) ||
				!testExamples.ReadInExamplesFromFile(testset))
		{
			System.err.println("Something went wrong reading the datasets ... " +
					"giving up.");
			System.exit(1);
		}
		else
		{ 
			trainExamples.DescribeDataset();
			//testExamples.DescribeDataset();
			//System.out.println(getBestAttribute(trainExamples,new ArrayList<BinaryFeature>(){}));
			System.out.println("Building and Learning Decision Tree");
			DecisionTreeNode dtn = decisionTreeLearning(trainExamples,getAllFeatures(trainExamples), trainExamples);
			System.out.println("------------------PRINTING TREE BELOW-------------------------");
			printDTree(dtn,0);
			System.out.println("-------------------------------------------\n");
			System.out.println("Statistics for Train Data ("+trainset+") : ");
			System.out.println("+++++++++++++++++++++++++++++++++++++++++++++");
			System.out.println("Failed Examples for Train Data: "+testDecisionTree(trainExamples,dtn).toString());
			System.out.println("Statistics for Test Data ("+testset+") : ");
			System.out.println("+++++++++++++++++++++++++++++++++++++++++++++");
			System.out.println("Failed Examples for Test Data: "+testDecisionTree(testExamples,dtn).toString());
			//System.out.println(dtn.getTreeSize());
		}
		System.out.println("---------------------------------");
		Utilities.waitHere("Hit <enter> when ready to exit.");
	}

	/**
	 * ID3 algorithm to build and learn decision tree
	 * Reference : Fig 18.5 of textbook; Jude Shavlik 2016
	 * @param examples
	 * @param attributes
	 * @param parent_egs
	 * @return
	 */
	public static DecisionTreeNode decisionTreeLearning(ListOfExamples examples, 
			List<BinaryFeature> attributes, ListOfExamples parent_egs) {

		if(examples.isEmpty() || examples == null) { 
			//System.out.println("leaf node: "+getPluralityValue(parent_egs));
			DecisionTreeNode ln = new DecisionTreeNode("leaf",getPluralityValue(parent_egs));
			return ln;
		}

		else if (hasSingleClass(examples)) {
			//return the classification
			DecisionTreeNode ln = new DecisionTreeNode("leaf",examples.get(0).getLabel());
			return ln;
		}

		else if(attributes.isEmpty() || attributes == null) {
			//return that 
			DecisionTreeNode ln = new DecisionTreeNode("leaf",getPluralityValue(examples));
			return ln;
		}

		else {
			BinaryFeature bestF = getBestAttribute(examples,attributes);
			//System.out.println("BEST FEATURE: "+bestF.getName());
			List<BinaryFeature> leftF = getRemainingFeatures(bestF, attributes);
			DecisionTreeNode root = new DecisionTreeNode(bestF,examples,"in");

			//for value one of bestF
			root.setLeftBranch(bestF.getFirstValue());
			//System.out.println("LEFT BRANCH: "+root.getLeftBranch());
			ListOfExamples exs = getExamplesForAttribute(root.getExamples(),bestF.getName(),bestF.getFirstValue());
			DecisionTreeNode leftSubTree = decisionTreeLearning(exs,leftF,examples);
			leftSubTree.setType("in");
			root.setLeftTree(leftSubTree);

			//for value two of bestF
			root.setRightBranch(bestF.getSecondValue());
			ListOfExamples exs2 = getExamplesForAttribute(root.getExamples(),bestF.getName() ,bestF.getSecondValue());
			DecisionTreeNode rightSubTree = decisionTreeLearning(exs2,leftF,examples);
			rightSubTree.setType("in");
			root.setRightTree(rightSubTree);

			return root;
		}

	}

	/**
	 * Prints decision tree given root 
	 * @param root
	 */
	private static void printDTree(DecisionTreeNode root, int depth) {
		if(root == null) {return;}

		if (root.getType().equalsIgnoreCase("leaf") || root.getLeftTree() == null || root.getRightTree() == null) {
			System.out.println("leaf: "+root.getLabel()+"\n");
		} 
		else {
			for(int i = 0; i < depth; i++) {System.out.print("   ");}
			System.out.println("FEATURE: ("+root.getFeature().getName()+")");
			System.out.println("left branch: "+root.getLeftBranch());
			printDTree(root.getLeftTree(),(depth+1));

			for(int i = 0; i < depth; i++) {System.out.print("   ");}
			System.out.println("FEATURE: ("+root.getFeature().getName()+")");
			System.out.println("\t\t\t\tright branch: "+root.getRightBranch());
			printDTree(root.getRightTree(),(depth+1));
		}
	}

	/**
	 * tests the decision tree against given set of data 
	 * @param testData
	 * @param root
	 * @return
	 */
	public static List<String> testDecisionTree(ListOfExamples testData, DecisionTreeNode root) {
		List<String> failed = new ArrayList<String>();
		int passed = 0; 
		// get total of testData examples 
		// extract label, pass example and classify and compare 
		// if comparison match, increememnt counter 
		// calculate percent successes
		// keep track of examples which failed so u can print later 
		for(int i = 0; i < testData.size(); i++) {
			Example ex = testData.get(i);
			if(ex.getLabel().equalsIgnoreCase(classifyExample(ex,root,testData))) {
				passed++;
			}else {
				failed.add(ex.getName());
			}
		}
		System.out.println("Percent Success: "+(double)passed/testData.size()*100+"%");
		return failed;
	}

	/**
	 * Classifies a single given example, returns classification
	 * @param in
	 * @param root
	 * @param loe
	 * @return
	 */
	public static String classifyExample(Example in, DecisionTreeNode root, ListOfExamples loe) {

		String label = null;

		//BASE CASES 
		if (root == null) {
			System.out.println("root is null");
			label = root.getLabel();
			return root.getLabel();
		}
		if(root.getType().equalsIgnoreCase("leaf") || root.getLeftTree() == null || root.getRightTree() == null) {
			label = root.getLabel();
			return label;
		}

		//RECURSIVE CASE 
		else {
			BinaryFeature curr = root.getFeature();
			int index = getIndexOfFeature(loe,curr.getName());
			if(root.getLeftBranch().equalsIgnoreCase(in.get(index))) {
				label = classifyExample(in, root.getLeftTree(), loe);
			} else {
				label = classifyExample(in,root.getRightTree(),loe);
			}
		}
		return label;
	}

	/**
	 * Determines best attribute from a list of examples 
	 * @param in
	 * @return
	 */
	private static BinaryFeature getBestAttribute(ListOfExamples in, List<BinaryFeature> remaining) {
		BinaryFeature best = remaining.get(0); //default/random
		double leastRemainder = Integer.MAX_VALUE; //or max info gain
		for(int i = 0; i < remaining.size(); i++) {
			BinaryFeature temp= remaining.get(i);
			best = leastRemainder > getRemainder(temp, in) ? temp:best;
			//System.out.println(best.getName());
			leastRemainder = getRemainder(temp,in);
		}
		return best;
	}

	/**
	 * removes best feature from list of features  
	 * @param best
	 * @param features
	 * @return
	 */
	private static List<BinaryFeature> getRemainingFeatures(BinaryFeature best, List<BinaryFeature> features) {
		List<BinaryFeature> remaining = new ArrayList<BinaryFeature>();
		for(BinaryFeature feat: features) {
			if(!feat.getName().equals(best.getName())) {
				BinaryFeature temp = new BinaryFeature(feat.getName(),feat.getFirstValue(),feat.getSecondValue());
				remaining.add(temp);
			}
		}
		return remaining; 
	}

	/**
	 * 
	 * @param loe
	 * @return
	 */
	private static List<BinaryFeature> getAllFeatures(ListOfExamples loe) {
		List<BinaryFeature> retVal = new ArrayList<BinaryFeature>();
		for(int i = 0; i < loe.getfeatures().length; i++) {
			retVal.add(loe.getfeatures()[i]);
		}
		return retVal;
	}


	/**
	 * Gets the remainder of the particular attribute 
	 * @param a
	 * @param set
	 * @return
	 */
	public static double getRemainder(BinaryFeature a, ListOfExamples set) {
		int totalExamples = set.size();
		int index = getIndexOfFeature(set,a.getName());

		//first value 
		int numFirstVal = attributeInFeatureCnt(a.getFirstValue(), set, index);
		int numAttFromLabel1_1 = set.getAttributeForLabelCnt(set.getOutputLabels().getFirstValue(),
				index , a.getFirstValue());
		int numAttFromLabel2_1 = set.getAttributeForLabelCnt(set.getOutputLabels().getSecondValue(),
				index, a.getFirstValue());		
		double infoNeeded1 = 
				infoNeeded((double)numAttFromLabel1_1/numFirstVal,(double)numAttFromLabel2_1/numFirstVal);

		//second value 
		int numSecondVal = attributeInFeatureCnt(a.getSecondValue(), set, index);
		int numAttFromLabel1_2 = 
				set.getAttributeForLabelCnt(set.getOutputLabels().getFirstValue(), index , a.getSecondValue());
		int numAttFromLabel2_2 = 
				set.getAttributeForLabelCnt(set.getOutputLabels().getSecondValue(), index , a.getSecondValue());
		double infoNeeded2 =
				infoNeeded((double)numAttFromLabel1_2/numSecondVal, (double)numAttFromLabel2_2/numSecondVal);

		return (((double)numFirstVal/totalExamples)*infoNeeded1) + ((double)numSecondVal/totalExamples)*infoNeeded2; 
	}


	/**
	 * Gets the majority value for tie breaker 
	 * @param loe
	 * @return
	 */
	public static String getPluralityValue(ListOfExamples loe) {
		int maxCnt = 0; 
		String retVal = null;
		int firstLabelCnt = loe.getLabelCount(loe.getOutputLabels().getFirstValue());
		int secondLabelCnt = loe.getLabelCount(loe.getOutputLabels().getSecondValue());
		//System.out.println(firstLabelCnt+" "+secondLabelCnt);
		String firstLabel = loe.getOutputLabels().getFirstValue();
		String secondLabel = loe.getOutputLabels().getSecondValue();

		if(firstLabelCnt == secondLabelCnt) {
			retVal = loe.getOutputLabels().getFirstValue().
					compareTo(loe.getOutputLabels().getSecondValue())<0 ? firstLabel : secondLabel;
			return retVal; 
		}
		return firstLabelCnt > secondLabelCnt ? firstLabel : secondLabel;
	}

	/**
	 * Checks if given set of examples have single classification. 
	 * @param loe
	 * @return
	 */
	public static boolean hasSingleClass(ListOfExamples loe) {
		Set<String> test = new HashSet<String>();
		for(int i = 0; i < loe.size(); i++) {
			test.add(loe.get(i).getLabel());
		}
		if (test.size() < 2) {
			return true; 
		}
		return false; 
	}


	/**
	 * Filters examples by particular attribute
	 * @param loe
	 * @param feature
	 * @param val
	 * @return
	 */
	public static ListOfExamples getExamplesForAttribute(ListOfExamples loe, String feature, String val) {
		ListOfExamples retVal = new ListOfExamples();
		for(int i = 0; i < loe.size(); i++ ) {
			Example ex = loe.get(i);
			if(ex.get(getIndexOfFeature(loe,feature)).equalsIgnoreCase(val)) {
				retVal.add(ex);
			}
		}
		retVal.setOutputLabel(loe.getOutputLabels());
		retVal.setFeatures(loe.getfeatures());
		retVal.setNumFeatures(loe.getNumberOfFeatures());
		retVal.setNumExamples(retVal.size());
		return retVal;
	}


	/**
	 * Calculates information needed for given positive and negative input 
	 * @param pos
	 * @param neg
	 * @return
	 */
	private static double infoNeeded(double pos, double neg) {
		if(pos == 0 || neg == 0) {
			return 0.0;
		}
		return (double)(-1*pos*log2(pos))+(-1*neg*log2(neg));
	}

	/**
	 * Counts the number of particular value in feature 
	 * @param value
	 * @param set
	 * @param idx
	 * @return
	 */
	public static int attributeInFeatureCnt(String value, ListOfExamples set, int idx) {
		int retVal = 0;
		for(int i = 0; i < set.size(); i++) { //all examples 
			if(set.get(i).get(idx).equalsIgnoreCase(value)) {
				retVal++;
			}
		}
		return retVal;
	}

	/**
	 * Returns index of feature name. 
	 * @param set
	 * @param feature
	 * @return
	 */
	public static int getIndexOfFeature(ListOfExamples set, String feature) {
		for(int i = 0; i < set.getNumberOfFeatures(); i ++) {
			if(feature.equalsIgnoreCase(set.getFeatureName(i))) {
				return i;
			}
		}
		return -1;
	}


	/**
	 * log2 function
	 * @param f
	 * @return
	 */
	public static final double log2(double f)
	{
		return (Math.log(f)/Math.log(2.0));
	}
}

// This class, an extension of ArrayList, holds an individual example.
// The new method PrintFeatures() can be used to
// display the contents of the example. 
// The items in the ArrayList are the feature values.
class Example extends ArrayList<String>
{
	// The name of this example.
	private String name;  

	// The output label of this example.
	private String label;

	// The data set in which this is one example.
	private ListOfExamples parent;  

	// Constructor which stores the dataset which the example belongs to.
	public Example(ListOfExamples parent) {
		this.parent = parent;
	}

	// Print out this example in human-readable form.
	public void PrintFeatures()
	{
		System.out.print("Example " + name + ",  label = " + label + "\n");
		for (int i = 0; i < parent.getNumberOfFeatures(); i++)
		{
			System.out.print("     " + parent.getFeatureName(i)
			+ " = " +  this.get(i) + "\n");
		}
	}

	// Adds a feature value to the example.
	public void addFeatureValue(String value) {
		this.add(value);
	}

	// Accessor methods.
	public String getName() {
		return name;
	}

	public String getLabel() {
		return label;
	}

	// Mutator methods.
	public void setName(String name) {
		this.name = name;
	}

	public void setLabel(String label) {
		this.label = label;
	}
}


/**
 * Represents single node in decision tree 
 * @author Shyamal
 *
 */
class DecisionTreeNode extends DecisionTree  {

	DecisionTreeNode leftSubTree, rightSubTree = null;
	String type, leftBranch, rightBranch, outLabel;

	BinaryFeature a; 
	//examples for this node
	ListOfExamples loe = null;
	//remaining features 
	List<BinaryFeature> features = null;

	public DecisionTreeNode(BinaryFeature bf, ListOfExamples exs, String typ) {
		this.a = bf;
		this.loe = exs;
		this.type = typ;
	}

	public DecisionTreeNode(String typ, String label) {
		this.type = typ;
		this.outLabel = label;
	}

	void setExamples(ListOfExamples in) {
		this.loe = in;
	}

	BinaryFeature getFeature() { return this.a;}
	ListOfExamples getExamples() { return this.loe; }

	String getLabel(){
		return this.outLabel;
	}

	void setType(String typ){
		this.type = typ;
	}

	String getType(){
		return this.type;
	}

	int getTreeSize() {
		if(this.type.equalsIgnoreCase("leaf")) {
			return 1;
		}
		else return 1 + leftSubTree.getTreeSize() + rightSubTree.getTreeSize();
	}


	int maxDepth() {
		if(this.type.equalsIgnoreCase("leaf")) {
			return 1;
		}
		else return 1 + leftSubTree.maxDepth() + rightSubTree.maxDepth();
	}


	int numLeafNodes() {
		if(this.type.equalsIgnoreCase("leaf")) {
			return 1;
		}
		else return leftSubTree.numLeafNodes() + rightSubTree.numLeafNodes();
	}

	int numInteriorNodes() {
		if(this.type.equalsIgnoreCase("leaf")) {
			return 0;
		}
		else return 1 + leftSubTree.numInteriorNodes() +
				rightSubTree.numInteriorNodes();
	}

	void setLeftTree(DecisionTreeNode left) {
		this.leftSubTree = left;
	}

	void setRightTree(DecisionTreeNode right) {
		this.rightSubTree = right;
	}

	void setRightBranch(String rb) {
		this.rightBranch = rb;
	}

	void setLeftBranch(String lb) {
		this.leftBranch = lb; 
	}

	String getRightBranch() {return this.rightBranch;}
	String getLeftBranch() {return this.leftBranch;}

	public DecisionTreeNode getRightTree() {
		return this.rightSubTree;
	}

	public DecisionTreeNode getLeftTree() {
		return this.leftSubTree;
	}
}

/**
 * Abstract DecisionTree class for important recursive methods. 
 * @author Shyamal 
 *
 */
abstract class DecisionTree{
	abstract int getTreeSize();
	abstract int maxDepth();
	abstract int numLeafNodes();
	abstract int numInteriorNodes();
}

/* This class holds all of our examples from one dataset
   (train OR test, not BOTH).  It extends the ArrayList class.
   Be sure you're not confused.  We're using TWO types of ArrayLists.  
   An Example is an ArrayList of feature values, while a ListOfExamples is 
   an ArrayList of examples. Also, there is one ListOfExamples for the 
   TRAINING SET and one for the TESTING SET. 
 */
class ListOfExamples extends ArrayList<Example>
{
	// The name of the dataset.
	private String nameOfDataset = "";

	// The number of features per example in the dataset.
	private int numFeatures = -1;

	// An array of the parsed features in the data.
	private BinaryFeature[] features;

	// A binary feature representing the output label of the dataset.
	private BinaryFeature outputLabel;

	// The number of examples in the dataset.
	private int numExamples = -1;

	public ListOfExamples() {} 

	// Print out a high-level description of the dataset including its features.
	public void DescribeDataset()
	{
		System.out.println("Dataset '" + nameOfDataset + "' contains "
				+ numExamples + " examples, each with "
				+ numFeatures + " features.");
		System.out.println("Valid category labels: "
				+ outputLabel.getFirstValue() + ", "
				+ outputLabel.getSecondValue());
		System.out.println("The feature names (with their possible values) are:");
		for (int i = 0; i < numFeatures; i++)
		{
			BinaryFeature f = features[i];
			System.out.println("   " + f.getName() + " (" + f.getFirstValue() +
					" or " + f.getSecondValue() + ")");
		}
	}

	public int getNumFeatures(){
		return this.numFeatures;
	}
	public BinaryFeature[] getFeatures() {
		return this.features;
	}

	public void setFeatures(BinaryFeature[] a) {
		this.features = a; 
	}
	public void setNumFeatures(int num){
		this.numFeatures = num;
	}
	public int getNumExamples() {
		return this.numExamples;
	}
	public void setNumExamples(int exs){
		this.numExamples = exs; 
	}
	public void setOutputLabel(BinaryFeature label) {
		this.outputLabel = label;
	}


	/**
	 * Gets count of a particular label from set of examples 
	 * @param label
	 * @return
	 */
	public int getLabelCount(String label) {
		int count = 0; 
		for(int i = 0; i < size(); i++) {
			if(this.get(i).getLabel().equalsIgnoreCase(label)) {
				count++;
			}
		}
		return count;
	}

	/**
	 * Get output label 
	 * @return
	 */
	public BinaryFeature getOutputLabels() {
		return this.outputLabel;
	}

	/**
	 * Gets count for particular attribute from label 
	 * @param label
	 * @param index
	 * @param attrVal
	 * @return
	 */
	// eg : 4 of the red are positive 
	public int getAttributeForLabelCnt(String label, int index, String attrVal) {
		int retVal = 0;
		for(int i = 0; i < size(); i ++) {
			if(this.get(i).getLabel().equalsIgnoreCase(label)) {// for that label 
				if(this.get(i).get(index).equalsIgnoreCase(attrVal))
					retVal++;
			}
		}
		return retVal;
	}

	public void filterExample(Example ex){
		this.remove(ex);
	}

	// Print out ALL the examples.
	public void PrintAllExamples()
	{
		System.out.println("List of Examples\n================");
		for (int i = 0; i < size(); i++)
		{
			Example thisExample = this.get(i);  
			thisExample.PrintFeatures();
		}
	}

	// Print out the SPECIFIED example.
	public void PrintThisExample(int i)
	{
		Example thisExample = this.get(i); 
		thisExample.PrintFeatures();
	}

	// Returns the number of features in the data.
	public int getNumberOfFeatures() {
		return numFeatures;
	}

	// Returns the name of the ith feature.
	public String getFeatureName(int i) {
		return features[i].getName();
	}

	public BinaryFeature[] getfeatures() {
		return features;
	}

	// Takes the name of an input file and attempts to open it for parsing.
	// If it is successful, it reads the dataset into its internal structures.
	// Returns true if the read was successful.
	public boolean ReadInExamplesFromFile(String dataFile) {
		nameOfDataset = dataFile;
		// Try creating a scanner to read the input file.
		Scanner fileScanner = null;
		try {
			fileScanner = new Scanner(new File(dataFile));
		} catch(FileNotFoundException e) {
			return false;
		}
		// If the file was successfully opened, read the file
		this.parse(fileScanner);
		return true;
	}

	/**
	 * Does the actual parsing work. We assume that the file is in proper format.
	 *
	 * @param fileScanner a Scanner which has been successfully opened to read
	 * the dataset file
	 */
	public void parse(Scanner fileScanner) {
		// Read the number of features per example.
		numFeatures = Integer.parseInt(parseSingleToken(fileScanner));

		// Parse the features from the file.
		parseFeatures(fileScanner);

		// Read the two possible output label values.
		String labelName = "output";
		String firstValue = parseSingleToken(fileScanner);
		String secondValue = parseSingleToken(fileScanner);
		outputLabel = new BinaryFeature(labelName, firstValue, secondValue);

		// Read the number of examples from the file.
		numExamples = Integer.parseInt(parseSingleToken(fileScanner));

		parseExamples(fileScanner);
	}

	/**
	 * Returns the first token encountered on a significant line in the file.
	 *
	 * @param fileScanner a Scanner used to read the file.
	 */
	private String parseSingleToken(Scanner fileScanner) {
		String line = findSignificantLine(fileScanner);
		// Once we find a significant line, parse the first token on the
		// line and return it.
		Scanner lineScanner = new Scanner(line);
		return lineScanner.next();
	}

	/**
	 * Reads in the feature metadata from the file.
	 * 
	 * @param fileScanner a Scanner used to read the file.
	 */
	private void parseFeatures(Scanner fileScanner) {
		// Initialize the array of features to fill.
		features = new BinaryFeature[numFeatures];
		for(int i = 0; i < numFeatures; i++) {
			String line = findSignificantLine(fileScanner);
			// Once we find a significant line, read the feature description
			// from it.
			Scanner lineScanner = new Scanner(line);
			String name = lineScanner.next();
			String dash = lineScanner.next();  // Skip the dash in the file.
			String firstValue = lineScanner.next();
			String secondValue = lineScanner.next();
			features[i] = new BinaryFeature(name, firstValue, secondValue);
		}
	}

	private void parseExamples(Scanner fileScanner) {
		// Parse the expected number of examples.
		for(int i = 0; i < numExamples; i++) {
			String line = findSignificantLine(fileScanner);
			Scanner lineScanner = new Scanner(line);

			// Parse a new example from the file.
			Example ex = new Example(this);

			String name = lineScanner.next();
			ex.setName(name);

			String label = lineScanner.next();
			ex.setLabel(label);

			// Iterate through the features and increment the count for any feature
			// that has the first possible value.
			for(int j = 0; j < numFeatures; j++) {
				String feature = lineScanner.next();
				ex.addFeatureValue(feature);
			}

			// Add this example to the list.
			this.add(ex);
		}
	}

	/**
	 * Returns the next line in the file which is significant (i.e. is not
	 * all whitespace or a comment.
	 *
	 * @param fileScanner a Scanner used to read the file
	 */
	private String findSignificantLine(Scanner fileScanner) {
		// Keep scanning lines until we find a significant one.
		while(fileScanner.hasNextLine()) {
			String line = fileScanner.nextLine().trim();
			if (isLineSignificant(line)) {
				return line;
			}
		}
		// If the file is in proper format, this should never happen.
		System.err.println("Unexpected problem in findSignificantLine.");
		return null;
	}

	/**
	 * Returns whether the given line is significant (i.e., not blank or a
	 * comment). The line should be trimmed before calling this.
	 *
	 * @param line the line to check
	 */
	private boolean isLineSignificant(String line) {
		// Blank lines are not significant.
		if(line.length() == 0) {
			return false;
		}
		// Lines which have consecutive forward slashes as their first two
		// characters are comments and are not significant.
		if(line.length() > 2 && line.substring(0,2).equals("//")) {
			return false;
		}
		return true;
	}
}

/**
 * Represents a single binary feature with two String values.
 */
class BinaryFeature {
	private String name;
	private String firstValue;
	private String secondValue;

	public BinaryFeature(String name, String first, String second) {
		this.name = name;
		firstValue = first;
		secondValue = second;
	}

	public String getName() {
		return name;
	}

	public String getFirstValue() {
		return firstValue;
	}

	public String getSecondValue() {
		return secondValue;
	}
}

class Utilities
{
	// This method can be used to wait until you're ready to proceed.
	public static void waitHere(String msg)
	{
		System.out.print("\n" + msg);
		try { System.in.read(); }
		catch(Exception e) {} // Ignore any errors while reading.
	}
}
